buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:0.9.0"
    }
}

plugins {
  id "java"
  id "maven"
  id "scala"
  id "com.github.maiflai.scalatest" version "0.18"
}

apply plugin: "java"
apply plugin: "scala"
apply plugin: "application"
apply plugin: "scalaStyle"

group = "space.maizy"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 1.8

ext {
  scalaMajorVersion = "2.12"
  scalaMinorVersion = "6"
  scalaVersion = "${scalaMajorVersion}.${scalaMinorVersion}"
}

repositories {
    mavenCentral()
}

dependencies {

  compile "org.scala-lang:scala-library:${scalaVersion}"
  compile "org.scala-lang:scala-reflect:${scalaVersion}"
  compile "org.typelevel:cats-core_${scalaMajorVersion}:1.1.0"

  testCompile "org.scalatest:scalatest_${scalaMajorVersion}:3.0.4"
  testRuntime "org.pegdown:pegdown:1.4.2"
}

scalaStyle {
    configLocation = "$rootProject.projectDir/scalastyle-config.xml"
    includeTestSourceDirectory = true
    source = "src/main/scala"
    testSource = "src/test/scala"
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.2"
    distributionType = "all"
}

test {
    dependsOn scalaStyle
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
        "-Xlint:_",
        "-feature",
        "-Xfatal-warnings",
        "-Ypartial-unification",
        "-Ywarn-dead-code",
        "-Ywarn-inaccessible",
        "-Ywarn-infer-any",
        "-Ywarn-nullary-override",
        "-Ywarn-nullary-unit",
        "-Ywarn-numeric-widen"
    ]
}
